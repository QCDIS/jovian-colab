# Docker Compose Container Infrastructure: JupyterLab Notebook and IPFS (client) node/peer
# Do *not* run this file directly (using Docker Compose)! Use the 'jupyter-docker.sh' script instead.
# See the '.env' file for the variables
version: "3.7"


# Jupyterlab needs access to the private IPFS network(s) and the Hyperledger Fabric Gateway(s)
# For convience, we'll also use this virtual network to connect JupyterLab to its IPFS node
networks:
  demo:
    name: ${DEMO_NETWORK_NAME}
    external: True


services:
  ipfs.jupyter.localhost:
    build: # Own IPFS image with private network bootstrap, mDNS toggle, and AutoRelay toggle support
      context: ../../ipfs/ipfs-docker/peer-image/
      dockerfile: ipfs-peer.dockerfile
      args:
        IPFS_VERSION: "${IPFS_PEER_VERSION}"
    image: "jc_demo_go-ipfs:${IPFS_PEER_VERSION}"
    container_name: "ipfs.jupyter-${INSTANCE}.localhost"
    hostname: "ipfs.jupyter-${INSTANCE}.localhost"
    init: false # Image is already using 'tini' by default
    restart: unless-stopped # Allows restart via IPFS's HTTP RPC API
    volumes:
      - ../jupyter-data/ipfs/${COMPOSE_PROJECT_NAME}:/data/ipfs # Shared IPFS repository
    networks:
      - demo
    environment:
      LIBP2P_FORCE_PNET: 1 # Force usage of private IPFS network (we use a dummy config that doesn't work but does start the IPFS process; we'll get the actual config via fabric)
      IPFS_SWARM_KEY: "/key/swarm/psk/1.0.0/\n/base16/\nffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" # Dummy private IPFS network key
      IPFS_MDNS: 'false' # Disable multicast DNS peer discovery (we use the Kademlia DHT instead)
      LOGSPOUT: 'ignore'
  notebook.jupyter.localhost:
    build: # Own JupyterLab image with prerequisites installed
      context: ./jupyterlab-image/
      dockerfile: jupyterlab.dockerfile
      args:
        JUPYTERLAB_IMAGE: "${JUPYTERLAB_IMAGE}"
        NODE_VERSION: "${NODE_VERSION}"
    image: "jc_demo_jupyterlab"
    container_name: "notebook.jupyter-${INSTANCE}.localhost"
    hostname: "notebook.jupyter-${INSTANCE}.localhost"
    user: "${JUPYTERLAB_UID}:${JUPYTERLAB_GID}" # Docker host UID & GID (i.e. your user account; needed for bind mounts)
    group_add:
      - users # 'users' group in container (provides rw access to /opt/conda)
      - root # provides rw access to /etc/passwd (needed to set UID and GID)
    init: false # Image is already using 'tini' by default
    volumes:
      - ../../../src/jupyter/notebook:/home/jovyan/work/notebook:ro # Read-only access to the notebooks
      - ../jupyter-data/ipfs/${COMPOSE_PROJECT_NAME}:/home/jovyan/work/ipfs # We need access to the local IPFS repository directory to configure the network (change the key file)
      - ../../fabric/fabric-config/crypto-config:/home/jovyan/work/crypto-config/fabric:ro
      - ../../ipfs/crypto-config:/home/jovyan/work/crypto-config/ipfs:ro
    networks:
      - demo
    environment:
      JUPYTER_ENABLE_LAB: 'yes'
      RESTARTABLE: 'yes'
      NOTEBOOK_ARGS: "--no-browser --ServerApp.ip=0.0.0.0 --ServerApp.port=8888 --ServerApp.token= --ServerApp.password= --ServerApp.allow_password_change=False --ServerApp.trust_xheaders=True --ServerApp.allow_remote_access=True --ServerApp.allow_origin='*' --ServerApp.base_url=/notebook.jupyter-${INSTANCE}.localhost/"
      LOGSPOUT: 'ignore'
